<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/</id><title>Game-Tech-Post</title><subtitle>游戏技术资料，游戏技术文档.</subtitle> <updated>2023-04-30T23:31:09+08:00</updated> <author> <name>Link Liu</name> <uri>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/</uri> </author><link rel="self" type="application/atom+xml" href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Link Liu </rights> <icon>/game-tech-post-old/assets/img/favicons/favicon.ico</icon> <logo>/game-tech-post-old/assets/img/favicons/favicon-96x96.png</logo> <entry><title>游戏和屏幕效果</title><link href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E6%B8%B8%E6%88%8F%E5%92%8C%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/" rel="alternate" type="text/html" title="游戏和屏幕效果" /><published>2023-04-20T00:00:00+08:00</published> <updated>2023-04-30T23:19:22+08:00</updated> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E6%B8%B8%E6%88%8F%E5%92%8C%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/</id> <content src="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E6%B8%B8%E6%88%8F%E5%92%8C%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/" /> <author> <name>Link Liu</name> </author> <category term="shader" /> <summary> 第九章 游戏和屏幕效果 当我们要创建可信和沉浸的游戏的时候，我们要考虑的不仅仅只有材料。屏幕效果也会改变游戏的整体感觉。这在电影里面非常常见，比如后期制作阶段中的调色。使用 第八章 通过Unity渲染纹理实现屏幕效果 中学到的知识，你也可以在游戏中实现这些技术。在这一章将会呈现两个有趣的效果；当然，你可以适当修改它们以适用于你的需求，也可以创建完全属于你自己屏幕效果。 在这一章，你将会学到下面的这些知识点： 创建一个老电影屏幕效果 创建一个夜视仪效果的屏幕效果 介绍 如果你正在阅读这本书，你很可能玩过一两个游戏。即时游戏一方面会使玩家进入一个沉浸世界，让人觉得他们好像在现实世界玩游戏一样。现代的游戏利用的屏幕效果越多获得的沉浸感也越多。 通过屏幕效果，我们可以将在某个确切环境中的心境从平静转为惊恐，仅仅只要改变屏幕看起来的样子。想象一下走进了某个关卡... </summary> </entry> <entry><title>屏幕效果中的覆盖混合模式</title><link href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E7%9A%84%E8%A6%86%E7%9B%96%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="屏幕效果中的覆盖混合模式" /><published>2023-04-18T00:00:00+08:00</published> <updated>2023-04-18T00:00:00+08:00</updated> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E7%9A%84%E8%A6%86%E7%9B%96%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/</id> <content src="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E7%9A%84%E8%A6%86%E7%9B%96%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/" /> <author> <name>Link Liu</name> </author> <category term="shader" /> <summary> 屏幕效果中的覆盖混合模式 对于我们最后要讲的知识点，我们将会去了解另一种混合模式，覆盖混合模式。这种模式实际上是利用了一些条件声明，这些条件声明决定了每个通道上的每个像素的最终颜色。所以，在使用这种混合模式的过程中需要编写的代码会更多一些。接下来我们看看该如何实现它。 始前准备 对于最后这个屏幕特效，我们需要像前面两个知识点中那样设置两个脚本（一个C#， 一个shader）。对于这个知识点，我们将使用之前使用的场景，所以我们不必创建新的场景了： 1.分别创建一个名为 Overlay_ImageEffect 的C#脚本和一个名为 Overlay_Effect 的着色器脚本。 2.把上一个知识点中用的C#脚本代码复制到这个新的C#脚本中来。 3.将上一个知识点中使用的着色器代码复制到这个新的着色器代码中来。 4.将... </summary> </entry> <entry><title>在屏幕效果中使用基础的类photoshop混合模式</title><link href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9A%84%E7%B1%BBPhotoshop%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="在屏幕效果中使用基础的类photoshop混合模式" /><published>2023-04-16T00:00:00+08:00</published> <updated>2023-04-16T00:00:00+08:00</updated> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9A%84%E7%B1%BBPhotoshop%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/</id> <content src="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9A%84%E7%B1%BBPhotoshop%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F/" /> <author> <name>Link Liu</name> </author> <category term="shader" /> <summary> 在屏幕效果中使用基础的类Photoshop混合模式 屏幕效果不仅仅只限于调整游戏中渲染纹理的颜色。我们还可以使用它将渲染纹理和其他的图像结合在一起。这个技术跟Photoshop中创建一个新的图层没有什么不同然后选择一种混合模式将两张图片混合在一起，当然在我们这里就是将一张纹理跟渲染纹理混合。这是一个非常强的技术，因为它提供给了艺术家一个在游戏中模拟混合模式的生产环境，而不不仅仅只是在Photoshop中。 对于这个特定的知识点，我们将会了解一些更加常用的混合模式，比如说 Multiply，Add 和 Overlay。你将会看到在游戏中拥有一个Photoshop中的混合模式的功能是多么的简单。 始前准备 开始前，我们需要准备资源。所以请跟着下面的步骤为我们新的 混合模式屏幕效果（ Blend mode screen effect） 设置好我们的屏幕效果系统并且让它顺... </summary> </entry> <entry><title>在屏幕效果中使用亮度, 饱和度和对比度</title><link href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%AE%E5%BA%A6,-%E9%A5%B1%E5%92%8C%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6/" rel="alternate" type="text/html" title="在屏幕效果中使用亮度, 饱和度和对比度" /><published>2023-04-15T00:00:00+08:00</published> <updated>2023-04-15T00:00:00+08:00</updated> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%AE%E5%BA%A6,-%E9%A5%B1%E5%92%8C%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6/</id> <content src="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E5%9C%A8%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%AE%E5%BA%A6,-%E9%A5%B1%E5%92%8C%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6/" /> <author> <name>Link Liu</name> </author> <category term="shader" /> <summary> 在屏幕效果中使用亮度, 饱和度和对比度 现在我们有了自己的屏幕效果系统并且能正常运行，我们就可以去探索在当今的游戏当中更多涉及到像素操作的一些更常用的屏幕效果。 首先，使用屏幕效果来调节游戏整体的最终颜色效果，这肯定可以给艺术家对于游戏最终的样子，有一个全局的控制。比如可以用一些颜色滑动条用来调节游戏最终渲染结果的 R,G,B 颜色强度。又或者是给整个屏幕填充大量的某个颜色这样看起来就像是一种深褐色的胶片效果。 对于这个特殊的知识点，我们将会涵盖一些可以在图像上进行的更加核心的颜色修改操作。它们是 亮度（brightness）, 饱和度（saturation） 和 对比度（contrast）。学习如何对这些颜色调整过程进行编码，将给我们学习屏幕的艺术效果一个很好的基础。 始前准备 这里我们需要创建一些新的资源。我们可以利用同样的场景作为我们的测试场景，但是我们需要一个... </summary> </entry> <entry><title>通过unity渲染纹理实现屏幕效果</title><link href="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E9%80%9A%E8%BF%87Unity%E6%B8%B2%E6%9F%93%E7%BA%B9%E7%90%86%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/" rel="alternate" type="text/html" title="通过unity渲染纹理实现屏幕效果" /><published>2023-04-02T00:00:00+08:00</published> <updated>2023-04-17T22:24:37+08:00</updated> <id>https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E9%80%9A%E8%BF%87Unity%E6%B8%B2%E6%9F%93%E7%BA%B9%E7%90%86%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/</id> <content src="https://linkliu.github.io/game-tech-post-old/game-tech-post-old/posts/%E9%80%9A%E8%BF%87Unity%E6%B8%B2%E6%9F%93%E7%BA%B9%E7%90%86%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E6%95%88%E6%9E%9C/" /> <author> <name>Link Liu</name> </author> <category term="shader" /> <summary> 第八章 通过Unity渲染纹理实现屏幕效果 我们在这一章会学习下面的这些知识点： 设置屏幕效果脚本系统 在屏幕效果中使用亮度, 饱和度和对比度 在屏幕效果中使用基础的类Photoshop混合模式 屏幕效果中的覆盖混合模式 介绍 学习编写着色器最让人印象深刻的是创建你自己的屏幕效果的过程，也就是常说的后处理。有了这些屏幕效果，我们就可以用 Bloom，Motion Blur 和 HDR 效果等技术创建出一些惊奇的实时图像。当今游戏市场推出的大部分游戏在 景深（depth of field） 效果，辉光（bloom） 效果甚至 颜色修正（color correction） 效果上都大量使用了屏幕效果。 通过这个章节，你将会学习如何构建一个如何去控制这些屏幕效果的脚本系统。我们将会涵盖 渲染纹理（Render Texture），深度缓冲（depth ... </summary> </entry> </feed>
